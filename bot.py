import os
import sys
import threading
import asyncio
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import Application, CommandHandler, ContextTypes
from main import app as fastapi_app

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
bot_app_instance = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    web_app_url = os.environ.get("WEB_APP_URL")
    if not web_app_url:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEB_APP_URL."
        )
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /
    if not web_app_url.endswith('/'):
        web_app_url += '/'

    keyboard = [
        [InlineKeyboardButton("üìû –û–±—â–∏–µ –∑–≤–æ–Ω–∫–∏", web_app=WebAppInfo(url=web_app_url))],
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", web_app=WebAppInfo(url=f"{web_app_url}init_private"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )

async def send_private_link_to_user(chat_id: int, link: str):
    if bot_app_instance:
        message_text = (
            f"–ü—Ä–∏–≥–ª–∞—à–∞—é —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: {link}\n\n"
            "–°—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö —á–∞—Å–æ–≤."
        )
        try:
            await bot_app_instance.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode=constants.ParseMode.HTML,
                disable_web_page_preview=True
            )
            return True
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}", file=sys.stderr)
            return False
    else:
        print("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", file=sys.stderr)
        return False


def run_fastapi():
    import uvicorn
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    fastapi_app.state.send_message_function = send_private_link_to_user
    uvicorn.run(fastapi_app, host="0.0.0.0", port=8000)

def main() -> None:
    global bot_app_instance
    bot_token = os.environ.get("BOT_TOKEN")
    if not bot_token:
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω.", file=sys.stderr)
        sys.exit(1)

    fastapi_thread = threading.Thread(target=run_fastapi)
    fastapi_thread.daemon = True
    fastapi_thread.start()
    print("FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

    application = Application.builder().token(bot_token).build()
    application.add_handler(CommandHandler("start", start))

    bot_app_instance = application

    print("Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
